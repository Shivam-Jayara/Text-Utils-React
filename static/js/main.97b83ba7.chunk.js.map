{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","tittle","type","id","name","onChange","myfunc","onClick","toggleMode","htmlFor","defaultProps","aboutText","TextForm","useState","text","setText","style","color","heading","value","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alerts","alert","role","word","lower","charAt","slice","Capitalize","msg","App","setMode","setAlert","message","setTimeout","body","console","log","getValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.97b83ba7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n\r\n  \r\n    return (\r\n        <div>\r\n           <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.tittle}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"/\">{props.tittle}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <input type=\"color\" name=\"\" id=\"inputColour\" onChange={props.myfunc} />\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable dark mode</label>\r\n        \r\n        \r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    tittle: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps={\r\n    tittle:'Set Tittle here',\r\n    aboutText:'About Text here'\r\n}","import React,{useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const[text,setText]=useState(\"\");\r\n\r\n  const handleUpClick=()=>{\r\n    // console.log(\"Convert to Uppercase was clicked: \"+text);\r\n    let newText= text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase\",\"success\");\r\n  }\r\n\r\n  const handleLoClick=()=>{\r\n    // console.log(\"Convert to Uppercase was clicked: \"+text);\r\n    let newText= text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase\",\"success\");\r\n  }\r\n  const handleClearClick=()=>{\r\n    let newText= \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared\",\"success\");\r\n  }\r\n\r\n  const handleOnChange=(event)=>{\r\n    // console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const handleCopy =()=>{\r\n    var text= document.getElementById(\"mybox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard\",\"success\");\r\n  }\r\n\r\n  const handleExtraSpaces=()=>{\r\n    let newText=text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Spaces Removed\",\"success\");\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color : props.mode==='light'?'#060b3e':'white' }}> \r\n        <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\" >\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'gray':'white',color : props.mode==='light'?'#060b3e':'white'}} id=\"mybox\" rows=\"8\"></textarea>\r\n        <button className=\"btn btn-primary my-3 mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button className=\"btn btn-primary my-3 mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n        <button className=\"btn btn-primary my-3 mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n        <button className=\"btn btn-primary my-3 mx-1\" onClick={handleCopy}>Copy Text</button>\r\n        <button className=\"btn btn-primary my-3 mx-1\" onClick={handleExtraSpaces}>Remove whitespaces</button>\r\n      </div>\r\n    </div>\r\n    <div className=\"container \" style={{color : props.mode==='light'?'#060b3e':'white' }}>\r\n      <h2>Your Text Summary</h2>\r\n      <p>Contains {text.split(\" \").length} words and {text.length} characters.</p>\r\n      <p>Can be read in {0.008 * text.split(\" \").length} minutes.</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:'Enter the text above to preview'}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alerts(props) {\r\n\r\n    const Capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{Capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import Navbar from \"./components/Navbar\";\r\nimport \"./App.css\";\r\nimport TextForm from \"./components/TextForm\";\r\n// import About from \"./components/About\";\r\nimport React, { useState } from 'react'\r\nimport Alerts from \"./components/Alerts\";\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [mode,setMode]=useState('light');\r\n  const [alert,setAlert]=useState(null);\r\n\r\n  const showAlert=(message,type)=>{\r\n    setAlert({\r\n      msg:message,\r\n      type:type\r\n    })\r\n    setTimeout(()=>{\r\n      setAlert(null);\r\n    },2000);\r\n  }\r\n\r\n  function fun(){\r\n    console.log(\"Onchange was called\");\r\n    const getValue=document.getElementById('inputColour').value;\r\n    console.log(getValue);\r\n    document.body.style.backgroundColor=getValue;\r\n  }\r\n\r\n  const toggleMode=()=>{\r\n    if(mode==='light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor='#060b3e';\r\n      showAlert(\"Dark mode has been enabled\",\"success\");\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor='white';\r\n      showAlert(\"Light mode has been enabled\",\"success\");\r\n    }\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n      <Navbar tittle=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} myfunc={fun} />\r\n      <Alerts alert={alert} />\r\n      <div className=\"container my-4\">\r\n          {/* <Switch> */}\r\n            {/* <Route path=\"/about\">\r\n              <About />\r\n            </Route> */}\r\n            {/* <Route path=\"/\"> */}\r\n            <TextForm heading=\"Enter the text below to analyze\" mode={mode} showAlert={showAlert} />\r\n            {/* </Route> */}\r\n          {/* </Switch> */}\r\n      </div>\r\n\r\n      {/* </Router>   */}\r\n      \r\n      \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}